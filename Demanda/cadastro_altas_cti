
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import QDateTime, Qt, QSettings, QStandardPaths
import mysql.connector
from PyQt6.QtWidgets import QMessageBox
from PyQt6.QtGui import QIcon

class Ui_Cadastro(QtWidgets.QMainWindow):
    def setupUi(self, Form, variavel, dados_demanda=None):
        self.ala = 'CTI ped'
        self.dados = dados_demanda
        self.variavel = variavel
        self.settings = QSettings('HC', 'SGL')
        script_directory = QStandardPaths.writableLocation(QStandardPaths.StandardLocation.AppDataLocation)
        config_file_path = f'{script_directory}/config.ini'
        self.settings = QSettings(config_file_path, QSettings.Format.IniFormat)
        self.frame = QtWidgets.QFrame(parent=Form)
        self.frame.setStyleSheet('background-color: #5DADE2;')
        self.frame.setGeometry(QtCore.QRect(350, 80, 729, 580))
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName('frame')
        self.dados.janela_reserva = self.frame
        self.frame.setCursor(Qt.CursorShape.OpenHandCursor)
        self.frame.mousePressEvent = lambda event, frame=self.frame: self.mousePressEvent_2(event, frame)
        self.frame.mouseReleaseEvent = lambda event, frame=self.frame: self.mouseReleaseEvent_2(event, frame)
        self.frame.mouseMoveEvent = lambda event, frame=self.frame: self.mouseMoveEvent_2(event, frame)
        self.dados.janela_cadastro = self.frame
        icon = QIcon('emergencia.ico')
        pixmap = icon.pixmap(50, 50)
        self.icone = QtWidgets.QLabel(parent=self.frame)
        self.icone.setPixmap(pixmap)
        self.icone.setGeometry(QtCore.QRect(3, 3, 50, 50))
        self.icone.show()
        self.tabela_reserva = QtWidgets.QTableWidget(parent=self.frame)
        self.tabela_reserva.setGeometry(QtCore.QRect(100, 120, 551, 400))
        self.tabela_reserva.setStyleSheet('background-color: rgb(255, 255, 255);border: none;gridline-color: black;')
        self.tabela_reserva.setObjectName('Tabela de reserva')
        self.tabela_reserva.setEditTriggers(QtWidgets.QTableWidget.EditTrigger.NoEditTriggers)
        self.btn_UCO_3 = QtWidgets.QPushButton(parent=self.frame)
        self.btn_UCO_3.setGeometry(QtCore.QRect(340, 60, 71, 21))
        self.btn_UCO_3.setObjectName('btn_UCO_3')
        self.btn_UCO_3.clicked.connect(lambda: self.abri_cti('tabela_uco'))
        self.btn_UCO_3.setStyleSheet('\n                    QPushButton {\n                        border: 2px solid #2E3D48;\n                        border-radius: 10px;\n                        background-color: #FFFFFF;\n                        color: #2E3D48;\n                    }\n                    QPushButton:pressed {\n                        background-color: #2E3D48;\n                        color: #FFFFFF;\n                    }\n                ')
        self.btn_CTI_3leste_3 = QtWidgets.QPushButton(parent=self.frame)
        self.btn_CTI_3leste_3.setGeometry(QtCore.QRect(260, 60, 71, 21))
        self.btn_CTI_3leste_3.setObjectName('btn_CTI_3leste_3')
        self.btn_CTI_3leste_3.clicked.connect(lambda: self.abri_cti('tabela_3_leste'))
        self.btn_CTI_3leste_3.setStyleSheet('\n                    QPushButton {\n                        border: 2px solid #2E3D48;\n                        border-radius: 10px;\n                        background-color: #FFFFFF;\n                        color: #2E3D48;\n                    }\n                    QPushButton:pressed {\n                        background-color: #2E3D48;\n                        color: #FFFFFF;\n                    }\n                ')
        self.btn_CTI_PS_3 = QtWidgets.QPushButton(parent=self.frame)
        self.btn_CTI_PS_3.setGeometry(QtCore.QRect(180, 60, 71, 21))
        self.btn_CTI_PS_3.setObjectName('btn_CTI_PS_3')
        self.btn_CTI_PS_3.clicked.connect(lambda: self.abri_cti('tabela_cti_ps'))
        self.btn_CTI_PS_3.setStyleSheet('\n                    QPushButton {\n                        border: 2px solid #2E3D48;\n                        border-radius: 10px;\n                        background-color: #FFFFFF;\n                        color: #2E3D48;\n                    }\n                    QPushButton:pressed {\n                        background-color: #2E3D48;\n                        color: #FFFFFF;\n                    }\n                ')
        self.final = False
        self.btn_cti_ped_3 = QtWidgets.QPushButton(parent=self.frame)
        self.btn_cti_ped_3.setGeometry(QtCore.QRect(100, 60, 71, 21))
        self.btn_cti_ped_3.setObjectName('btn_cti_ped_3')
        self.btn_cti_ped_3.clicked.connect(lambda: self.abri_cti('tabela_cti_ped'))
        self.btn_cti_ped_3.setStyleSheet('\n                    QPushButton {\n                        border: 2px solid #2E3D48;\n                        border-radius: 10px;\n                        background-color: #FFFFFF;\n                        color: #2E3D48;\n                    }\n                    QPushButton:pressed {\n                        background-color: #2E3D48;\n                        color: #FFFFFF;\n                    }\n                ')
        self.proc_leito = QtWidgets.QLineEdit(parent=self.frame)
        self.proc_leito.setGeometry(QtCore.QRect(100, 97, 350, 20))
        self.proc_leito.setStyleSheet('background-color: rgb(255, 255, 255);')
        self.proc_leito.setObjectName('Proc Leito')
        self.proc_leito.setStyleSheet('border: 2px solid white; border-radius: 10px; background-color: white;')
        icon = QIcon('lupa.ico')
        self.proc_leito.addAction(icon, QtWidgets.QLineEdit.ActionPosition.LeadingPosition)
        self.proc_leito.setPlaceholderText('Pesquisar Paciente')
        self.btn_alta = QtWidgets.QPushButton(parent=self.frame)
        self.btn_alta.setGeometry(QtCore.QRect(550, 530, 101, 31))
        self.btn_alta.setObjectName('pushButton')
        self.btn_alta.clicked.connect(self.dar_alta)
        self.btn_alta.setStyleSheet('\n                QPushButton {\n                    border: 2px solid #2E3D48;\n                    border-radius: 10px;\n                    background-color: #FFFFFF;\n                    color: #2E3D48;\n                }\n\n                QPushButton:hover {\n                    background-color: #DDDDDD;  /* Change this to your desired hover color */\n                    color: rgb(0, 0, 0);\n                }\n\n                QPushButton:pressed {\n                    background-color: #2E3D48;  /* Change this to your desired pressed color */\n                    color: #FFFFFF;\n                }\n            ')
        self.proc_leito.textChanged.connect(self.pesquisar)
        for widget in self.frame.findChildren(QtWidgets.QWidget):
            widget.show()
        self.frame.show()
        self.abri_cti('tabela_cti_ped')
        self.retranslateUi_cti_ped()
        self.conf_layout()

    def dar_alta(self):
        tabela = self.ala
        selecionado = []
        analise = 0
        for row in range(self.tabela_reserva.rowCount()):
            selecao = self.tabela_reserva.item(row, 0)
            if selecao.checkState() == QtCore.Qt.CheckState.Checked:
                analise = 1
                selecionado.append(row)
        if analise == 1:
            msg_box = QMessageBox()
            msg_box.setIcon(QMessageBox.Icon.Information)
            msg_box.setWindowTitle('AVISO')
            msg_box.setText('Solicitar ALTA?')
            icon = QIcon('warning.ico')
            msg_box.setWindowIcon(icon)
            msg_box.setStandardButtons(QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
            reply = msg_box.exec()
            if reply == QMessageBox.StandardButton.Yes:
                for row in reversed(selecionado):
                    conexao = mysql.connector.connect(host='10.36.0.32', user='sglHC2024', password='S4g1L81', database='sgl')
                    cursor = conexao.cursor()
                    cursor.execute('SELECT COUNT(*) FROM alta_cti')
                    conta_linha = cursor.fetchone()[0]
                    cursor.close()
                    conexao.close()
                    conexao = mysql.connector.connect(host='10.36.0.32', user='sglHC2024', password='S4g1L81', database='sgl')
                    cursor = conexao.cursor()
                    colum_nome = 7
                    colum_data = 5
                    for colum in range(self.tabela_reserva.columnCount()):
                        item_pac = self.tabela_reserva.horizontalHeaderItem(colum)
                        if item_pac.text() == 'NOME DO PACIENTE':
                            colum_nome = colum
                        if item_pac.text() == 'DATA DE NASCIMENTO':
                            colum_data = colum
                    nome = self.tabela_reserva.item(row, colum_nome)
                    data_nasc = self.tabela_reserva.item(row, colum_data)
                    current_datetime = QDateTime.currentDateTime()
                    formatted_date = current_datetime.toString('dd/MM/yyyy')
                    formatted_time = current_datetime.toString('hh:mm:ss')
                    leitos = self.tabela_reserva.verticalHeaderItem(row)
                    LEITOS = leitos.text()
                    comando = f'INSERT INTO alta_cti (idnew_table_alta_cti, DATA_DA_ALTA,HORA_DE_SOLICITACAO_DA_ALTA,NOME_DO_PACIENTE, DATA_DE_NASCIMENTO, UNIDADE_DE_INTERNAÇÃO_ATUAL, STATUS_DAS_ALTAS, LEITO_ATUAL) VALUES (\"{conta_linha + 1}\",\"{formatted_date}\",\"{formatted_time}\",\"{nome.text()}\", \"{data_nasc.text()}\", \"CTI PED\", \"PRÉ ALTA\", \"{LEITOS}\")'
                    cursor.execute(comando)
                    conexao.commit()
                    cursor.close()
                    conexao.close()
                    conexao = mysql.connector.connect(host='10.36.0.32', user='sglHC2024', password='S4g1L81', database='sgl')
                    cursor = conexao.cursor()
                    current_datetime = QDateTime.currentDateTime()
                    formatted_date = current_datetime.toString('dd/MM/yyyy')
                    current_datetime = QDateTime.currentDateTime()
                    formatted_time = current_datetime.toString('hh:mm')
                    texto = f'{formatted_time}                {self.dados.nome_user}  DA  SILVA  TRANSFERIU   O  PACIENTE  {nome.text()}  PARA  DEMANDAS  ALTAS  CTI'
                    data = formatted_date
                    comando = 'INSERT INTO history (data, histo) VALUES (%s, %s)'
                    valores = (data, texto)
                    cursor.execute(comando, valores)
                    conexao.commit()
                    cursor.close()
                    conexao.close()
                    conexao = mysql.connector.connect(host='10.36.0.32', user='sglHC2024', password='S4g1L81', database='sgl')
                    cursor = conexao.cursor()
                    cursor.execute(f'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = \'{tabela}\' ORDER BY ORDINAL_POSITION')
                    colunas = [coluna[0] for coluna in cursor.fetchall()]
                    for row in reversed(selecionado):
                        for colum in range(1, self.tabela_reserva.columnCount()):
                            item_pac = self.tabela_reserva.horizontalHeaderItem(colum)
                            if item_pac.text() == 'STATUS DO LEITO':
                                item_text = 'VAGO'
                            else:  # inserted
                                if item_pac.text() == 'SEXO DA ENFERMARIA':
                                    item_text = self.tabela_reserva.item(row, colum).text()
                                else:  # inserted
                                    item_text = ''
                            item_copy = QtWidgets.QTableWidgetItem(item_text)
                            self.tabela_reserva.setItem(row, colum, item_copy)
                            valor_para_atualizar = item_text
                            comando_update = f'UPDATE {tabela} SET {colunas[colum]} = %s'
                            cursor.execute(comando_update, (valor_para_atualizar,))
                    conexao.commit()
                    cursor.close()
                    conexao.close()
                    if '_aguardando' in item.text():
                        for row in reversed(selecionado):
                            item = self.tabela_reserva.verticalHeaderItem(row + 1)
                            conexao = mysql.connector.connect(host='10.36.0.32', user='sglHC2024', password='S4g1L81', database='sgl')
                            leito = self.tabela_reserva.verticalHeaderItem(row + 1)
                            cursor = conexao.cursor()
                            comando = f'DELETE FROM tabela_cti_ped WHERE LEITO = \"{leito.text()}\"'
                            cursor.execute(comando)
                            conexao.commit()
                            cursor.close()
                            conexao.close()

    def abri_cti(self, tabela):
        self.tabela_reserva.setColumnCount(9)
        self.ala = tabela
        for row in range(9):
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont('Arial', 15, weight=QtGui.QFont.Weight.Bold)
            font.setPointSize(8)
            font.setBold(True)
            font.setWeight(75)
            item.setFont(font)
            self.tabela_reserva.setHorizontalHeaderItem(row, item)
        self.retranslateUi_cti_ped()
        self.atualiza_cti(tabela)

    def atualiza_cti(self, tabela):
        try:
            conexao = mysql.connector.connect(host='10.36.0.32', user='sglHC2024', password='S4g1L81', database='sgl')
            cursor = conexao.cursor()
            comando = f'SELECT * FROM {tabela}'
            cursor.execute(comando)
            leitura = cursor.fetchall()
            self.tabela_reserva.clearContents()
            self.tabela_reserva.setRowCount(0)

            for linha in leitura:
                if linha[8] == 'VAGO' or '_aguardando' in linha[0]:
                    continue

                row = self.tabela_reserva.rowCount()
                self.tabela_reserva.insertRow(row)

                for column, valor in enumerate(linha):
                    item = QtWidgets.QTableWidgetItem(str(valor))
                    item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)

                    if column == 0:
                        self.tabela_reserva.setVerticalHeaderItem(row, item)
                        _translate = QtCore.QCoreApplication.translate
                        self.increase_column_width(0, 16)
                        item_pac = self.tabela_reserva.verticalHeaderItem(row)
                        item_pac.setText(_translate('MainWindow', item.text()))

                    if column != 0:
                        if item is None or item.text() == 'None':
                            item = QtWidgets.QTableWidgetItem(str(''))
                        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
                        self.tabela_reserva.setItem(row, column, item)

        except mysql.connector.Error as error:
            print('Erro ao conectar ao MySQL:', error)

        for row in range(self.tabela_reserva.rowCount()):
            selecao = QtWidgets.QTableWidgetItem()
            selecao.setFlags(QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
            selecao.setCheckState(QtCore.Qt.CheckState.Unchecked)
            self.tabela_reserva.setItem(row, 0, selecao)

        for colum in range(self.tabela_reserva.columnCount()):
            item_pac = self.tabela_reserva.horizontalHeaderItem(colum).text()
            text_width = self.fontMetrics().boundingRect(item_pac).width()
            self.increase_column_width(colum, text_width + 100)

    def increase_column_width(self, column, width):
        self.tabela_reserva.setColumnWidth(column, width)

    def retranslateUi_cti_ped(self):
        _translate = QtCore.QCoreApplication.translate
        item = self.tabela_reserva.horizontalHeaderItem(0)
        item.setText(_translate('Form', ' '))
        item = self.tabela_reserva.horizontalHeaderItem(1)
        item.setText(_translate('Form', 'PRONTUÁRIO'))
        item = self.tabela_reserva.horizontalHeaderItem(2)
        item.setText(_translate('Form', 'NPF'))
        item = self.tabela_reserva.horizontalHeaderItem(4)
        item.setText(_translate('Form', 'NOME DO PACIENTE'))
        item = self.tabela_reserva.horizontalHeaderItem(7)
        item.setText(_translate('Form', 'DATA DE NASCIMENTO'))
        item = self.tabela_reserva.horizontalHeaderItem(5)
        item.setText(_translate('Form', 'SEXO DA ENFERMARIA'))
        item = self.tabela_reserva.horizontalHeaderItem(3)
        item.setText(_translate('Form', 'OBSERVAÇÕES'))
        item = self.tabela_reserva.horizontalHeaderItem(6)
        item.setText(_translate('Form', 'PREVISÃO DE ALTA'))
        item = self.tabela_reserva.horizontalHeaderItem(8)
        item.setText(_translate('Form', 'STATUS DO LEITO'))
        self.btn_cti_ped_3.setText(_translate('Form', 'CTI PED'))
        self.btn_UCO_3.setText(_translate('Form', 'UCO'))
        self.btn_CTI_3leste_3.setText(_translate('Form', 'CTI 3º LESTE'))
        self.btn_CTI_PS_3.setText(_translate('Form', 'CTI PS'))
        self.btn_alta.setText(_translate('Form', 'SOLICITAR ALTA'))

    def pesquisar(self, pesquisa):
        colum_nome = 7
        for colum in range(self.tabela_reserva.columnCount()):
            item_pac = self.tabela_reserva.horizontalHeaderItem(colum)
            if item_pac.text() == 'NOME DO PACIENTE':
                colum_nome = colum
        for row in range(self.tabela_reserva.rowCount()):
            item = self.tabela_reserva.item(row, colum_nome)
            item2 = self.tabela_grade.verticalHeaderItem(row)
            if item is not None:
                if pesquisa.lower() in item.text().lower() or pesquisa.lower() in item2.text().lower():
                    self.tabela_reserva.showRow(row)
                else:  # inserted
                    self.tabela_reserva.hideRow(row)

    def conf_layout(self):
        if self.settings.contains('tema'):
            font_name = self.settings.value('font', defaultValue='')
            backcolocor = self.settings.value('tema', defaultValue='')
            color = self.settings.value('color', defaultValue='')
            tamanho = int(self.settings.value('tamanho', defaultValue=10))
        else:  # inserted
            backcolocor = '#5DADE2'
            color = 'Black'
            tamanho = 12
            font_name = 'Segoe UI'
        self.backcolocor = backcolocor
        self.color = color
        self.font = font_name
        self.tamanho = tamanho
        for label in self.frame.findChildren(QtWidgets.QLabel):
            label.setStyleSheet(f'color: {color}; font:  {tamanho}px {font_name}; border:none')
        self.frame.setStyleSheet(f'background-color: {backcolocor};color: {color};font: {font_name} {tamanho}px;border: 2px solid #2E3D48;border-radius: 10px;')

    def mousePressEvent_2(self, event, centralwidget):
        if event.button() == Qt.MouseButton.LeftButton:
            centralwidget.setCursor(Qt.CursorShape.ClosedHandCursor)
        centralwidget.mouse_offset = event.pos()

    def mouseReleaseEvent_2(self, event, centralwidget):
        if event.button() == Qt.MouseButton.LeftButton:
            centralwidget.setCursor(Qt.CursorShape.OpenHandCursor)

    def mouseMoveEvent_2(self, event, centralwidget):
        if event.buttons() == Qt.MouseButton.LeftButton:
            new_pos = centralwidget.mapToParent(event.pos() - centralwidget.mouse_offset)
            centralwidget.move(new_pos)
            x, y = (new_pos.x(), new_pos.y())
